/**
 * Wefly Track API
 * API for managing and retrieving track data for Wefly.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTracksMetadataGet500Response from '../model/ApiTracksMetadataGet500Response';
import Metadata from '../model/Metadata';
import Path from '../model/Path';
import Track from '../model/Track';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTrackTrackIdDelete operation.
     * @callback module:api/DefaultApi~apiTrackTrackIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete track data
     * @param {String} trackId ID of the track to delete
     * @param {module:api/DefaultApi~apiTrackTrackIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiTrackTrackIdDelete(trackId, callback) {
      let postBody = null;
      // verify the required parameter 'trackId' is set
      if (trackId === undefined || trackId === null) {
        throw new Error("Missing the required parameter 'trackId' when calling apiTrackTrackIdDelete");
      }

      let pathParams = {
        'trackId': trackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/track/{trackId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTracksMetadataGet operation.
     * @callback module:api/DefaultApi~apiTracksMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve track metadata
     * @param {Date} from Start date-time for the search range
     * @param {Date} to End date-time for the search range
     * @param {Object} opts Optional parameters
     * @param {String} [pilotname] Pilot name to filter by
     * @param {Number} [maxAltitude] Minimum altitude to filter by
     * @param {Number} [distance] Minimum distance to filter by
     * @param {Number} [duration] Minimum duration to filter by
     * @param {String} [bounds] Bounding box coordinates to filter by (format \"minLon,minLat,maxLon,maxLat\")
     * @param {String} [activities] Comma-separated list of activities to filter by
     * @param {module:api/DefaultApi~apiTracksMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Metadata>}
     */
    apiTracksMetadataGet(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling apiTracksMetadataGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling apiTracksMetadataGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'from': from,
        'to': to,
        'pilotname': opts['pilotname'],
        'maxAltitude': opts['maxAltitude'],
        'distance': opts['distance'],
        'duration': opts['duration'],
        'bounds': opts['bounds'],
        'activities': opts['activities']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = [Metadata];
      return this.apiClient.callApi(
        '/api/tracks/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTracksPathsGet operation.
     * @callback module:api/DefaultApi~apiTracksPathsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: Path}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve track paths
     * @param {String} trackids Comma-separated list of track IDs to retrieve paths for
     * @param {module:api/DefaultApi~apiTracksPathsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: Path}>}
     */
    apiTracksPathsGet(trackids, callback) {
      let postBody = null;
      // verify the required parameter 'trackids' is set
      if (trackids === undefined || trackids === null) {
        throw new Error("Missing the required parameter 'trackids' when calling apiTracksPathsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'trackids': trackids
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = {'String': Path};
      return this.apiClient.callApi(
        '/api/tracks/paths', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTracksPost operation.
     * @callback module:api/DefaultApi~apiTracksPostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload track data
     * @param {module:model/Track} track 
     * @param {module:api/DefaultApi~apiTracksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiTracksPost(track, callback) {
      let postBody = track;
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling apiTracksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
